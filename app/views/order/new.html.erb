<!-- <select class="js-data-example-ajax" style="width:100%">
  <option value="3620194" selected="selected">Select a value......</option>
</select>

<script>
function formatRepo (repo) {
  if (repo.loading) return repo.text;

  var markup = '<div class="clearfix">' +
  '<div clas="col-sm-10">' +
  '<div class="clearfix">' +
  '<div class="col-sm-6">' + repo.full_name + '</div>' +
  '<div class="col-sm-3"><i class="fa fa-code-fork"></i> ' + repo.forks_count + '</div>' +
  '</div>';

  if (repo.description) {
    markup += '<div>' + repo.description + '</div>';
  }

  markup += '</div></div>';

  return markup;
}

function formatRepoSelection (repo) {
  return repo.full_name;
}

$(document).ready(function(){

  $(".js-data-example-ajax").select2({
    ajax: {
      url: "https://api.github.com/search/repositories",
      dataType: 'json',
      delay: 250,
      data: function (params) {
        return {
          q: params.term, // search term
          page: params.page
        };
      },
      processResults: function (data, page) {
        // parse the results into the format expected by Select2.
        // since we are using custom formatting functions we do not need to
        // alter the remote JSON data
        return {
          results: data.items
        };
      },
      cache: true
    },
    escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
    minimumInputLength: 1,
    templateResult: formatRepo, // omitted for brevity, see the source of this page
     templateSelection: formatRepoSelection // omitted for brevity, see the source of this page

  });
});
</script> -->




<select class="js-data-example-ajax">
  <option value="3620194" selected="selected">select2/select2</option>
</select>

<script type="text/javascript">

function formatRepo (repo) {
  if (repo.loading) return repo.text;

  var markup = '<div class="clearfix">' +
  '<div clas="col-sm-10">' +
  '<div class="clearfix">' +
  '<div class="col-sm-6">' + 'repo.full_name' + '</div>' +
  '<div class="col-sm-3"><i class="fa fa-code-fork"></i> ' + 'repo.forks_count' + '</div>' +
  '</div>';

  if (repo.description) {
    markup += '<div>' + repo.description + '</div>';
  }

  markup += '</div></div>';
  console.log(repo);
  return markup;
}

function formatRepoSelection (repo) {
  return 'repo.label';
}

$(document).ready(function(){

  $(".js-data-example-ajax").select2({
    ajax: {
      url: function (params){
        return 'http://localhost:3000/places/get_stations/' + params.term;
      },
      dataType: 'json',
      delay: 250,
      data: function (params) {
        return {
          // q: params.term, // search term
          page: params.page
        };
      },
      processResults: function (data, page) {
        // parse the results into the format expected by Select2.
        // since we are using custom formatting functions we do not need to
        // alter the remote JSON data
        return {
          results: data.items
        };
      },
      cache: true
    },
    escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
    minimumInputLength: 1,
    templateResult: formatRepo, // omitted for brevity, see the source of this page
    templateSelection: formatRepoSelection // omitted for brevity, see the source of this page

  });
});
</script>



<div class="container">
  <div class="row">
    <div class="col-md-offset-4 col-md-4">
      <h1 class="text-center">Create your order</h1>
      <%= form_tag 'create' do %>
        <div class="form-group">
          <p><label for = "from_city_id">From</label><br/>
						<input type="text" id="from_city_id" list="from_datalist" placeholder="e.g. datalist">
						<datalist id="from_datalist"></datalist>
					</p>
        </div>


      	<p><label for = "to_city_id">To</label><br/>
				<input type="text" id="to_city_id" list="to_datalist" placeholder="e.g. datalist">
				<datalist id="to_datalist"></datalist>

      	<p><label for = "from_date">From date</label><br/>
      	<%= date_field 'orders', 'from_date', class: 'input-block', value: Time.now.strftime("%Y-%m-%d") %></p>

      	<p><label for = "to_date">To date</label><br/>
      	<%= date_field 'orders', 'to_date', class: 'input-block', value: Time.now.strftime("%Y-%m-%d") %></p>

      	<% @condition_groups.each do |condition_group| %>
      		<hr/>
      		<div>
      			<%= condition_group.condition_name %> <%= check_box_tag "on[#{condition_group.id}]" %>
      			<hr/>
      		  <% condition_group.conditions.each do |condition| %>
      			  <% if condition.value_type == 'C' %>
      					<%= condition.name %>
      					<br/>
      					<%= select_tag "#{condition_group.id}[#{condition.id}]", options_for_select(condition.condition_params.map {|u| [u.name, u.id]}), :multiple => true  %>
      			  <% elsif condition.value_type == 'S' %>
                <%= condition.name %>
      					<br/>
      					<%= text_field condition_group.id, condition.id -%><br/>
      			  <% else %>
      			    <%= condition.name %>
      					<br/>
      					<%= number_field condition_group.id, condition.id -%><br/>
      			  <% end %>
      			<% end %>
      		</div>
      	<% end %>
      	<!-- <hr/> -->

      	<%= submit_tag "Create", class: 'btn btn-success' %>

      <% end -%>
    </div>
  </div>
</div>


<!-- <%= link_to 'Back', {:action => 'list'} %> -->
<script>

// Get the <datalist> and <input> elements.
var toDataList = document.getElementById('to_datalist');
var toInput = document.getElementById('to_city_id');

var fromDataList = document.getElementById('from_datalist');
var fromInput = document.getElementById('from_city_id');

var toIsRunning = false;
var fromIsRunning = false;

var fromRequest = new XMLHttpRequest();
var toRequest = new XMLHttpRequest();

toInput.addEventListener('input', function (evt) {
  if(!toIsRunning){
    toIsRunning = true;

		if(toInput.value && toInput.value.length > 2){
		// Set up and make the request.
		toRequest.open('GET', 'http://localhost:3000/places/get_stations/' + toInput.value, true);
		toRequest.send();
		}
		toIsRunning = false;
  }
});

fromInput.addEventListener('input', function (evt) {
  if(!fromIsRunning){
    fromIsRunning = true;

		if(fromInput.value && fromInput.value.length > 2){
		// Set up and make the request.
		fromRequest.open('GET', 'http://localhost:3000/places/get_stations/' + fromInput.value, true);
		fromRequest.send();
		}

		fromIsRunning = false;
  }
});
// Create a new XMLHttpRequest.


// Handle state changes for the request.
fromRequest.onreadystatechange = function(response) {
  if (fromRequest.readyState === 4) {
    if (fromRequest.status === 200) {
      // Parse the JSON
      var jsonOptions = JSON.parse(fromRequest.responseText);

      // Loop over the JSON array.
      jsonOptions.forEach(function(item) {
        // Create a new <option> element.
        var option = document.createElement('option');
        // Set the value using the item in the JSON array.
        option.value = item.label;
        option.innerHTML = item.value;
        // Add the <option> element to the <datalist>.
        fromDataList.appendChild(option);
      });

      // Update the placeholder text.
      fromInput.placeholder = "завантаження...";
    } else {
      // An error occured :(
      fromInput.placeholder = "Невдала спроба! Спробуйте, будь ласка, пізніше";
    }
  }
};

// Handle state changes for the request.
toRequest.onreadystatechange = function(response) {
  if (toRequest.readyState === 4) {
    if (toRequest.status === 200) {
      // Parse the JSON
      var jsonOptions = JSON.parse(toRequest.responseText);

      // Loop over the JSON array.
      jsonOptions.forEach(function(item) {
        // Create a new <option> element.
        var option = document.createElement('option');
        // Set the value using the item in the JSON array.
        option.value = item.label;
        option.innerHTML = item.value;
        // Add the <option> element to the <datalist>.
        toDataList.appendChild(option);
      });

      // Update the placeholder text.
      toInput.placeholder = "завантаження...";
    } else {
      // An error occured :(
      toInput.placeholder = "Невдала спроба! Спробуйте, будь ласка, пізніше";
    }
  }
};

// Update the placeholder text.
fromInput.placeholder = "Виберіть місто відправлення...";
toInput.placeholder = "Виберіть місто прибуття...";

</script>
